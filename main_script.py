from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.service import Service as ChromeService
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from webdriver_manager.chrome import ChromeDriverManager
from datetime import datetime, timedelta
from openai import OpenAI
from dotenv import load_dotenv
import time, json, os


# --- CARGAR VARIABLES DEL .env ---
load_dotenv()  # Carga OPENAI_API_KEY, INTRA_USER, INTRA_PASS, etc.
# -------------------

# --- CONFIGURAR ---
LOGIN_URL = os.getenv("URL_PRIVADA")
USERNAME = os.getenv("INTRA_USER")
PASSWORD = os.getenv("INTRA_PASS")
USERNAME_SELECTOR = '#usuario'
PASSWORD_SELECTOR = '#password'
SUBMIT_SELECTOR = '#btAceptar'
CALENDAR_BUTTON_SELECTOR = '.ui-datepicker-trigger'
VOLVER_SELECTOR = '#btVolver'
BUSCADOR_INPUT_SELECTOR = '#textoBusqueda'
BUSCADOR_BOTON_SELECTOR = '#buscar'
# -------------------

hoy = datetime.now()

# Crear cliente OpenAI con la clave del .env
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# ---------------------------------------------------------------------
# FUNCIONES BASE
# ---------------------------------------------------------------------
def save_cookies(driver, path="cookies.json"):
    with open(path, "w") as f:
        json.dump(driver.get_cookies(), f)

def lunes_de_semana(fecha):
    return fecha - timedelta(days=fecha.weekday())

def hacer_login(driver, wait):
    """Realiza el login en la intranet."""
    driver.get(LOGIN_URL)
    usr = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, USERNAME_SELECTOR)))
    usr.clear()
    usr.send_keys(USERNAME)
    pwd = driver.find_element(By.CSS_SELECTOR, PASSWORD_SELECTOR)
    pwd.clear()
    pwd.send_keys(PASSWORD)
    driver.find_element(By.CSS_SELECTOR, SUBMIT_SELECTOR).click()
    time.sleep(3)
    print("‚úÖ Login completado.")

def volver_inicio(driver):
    """Pulsa el bot√≥n 'Volver' para regresar a la pantalla principal tras login."""
    try:
        btn_volver = driver.find_element(By.CSS_SELECTOR, VOLVER_SELECTOR)
        btn_volver.click()
        time.sleep(2)
        print("‚Ü©Ô∏è Volviendo a la pantalla principal...")
    except Exception as e:
        print(f"‚ö†Ô∏è No se pudo pulsar el bot√≥n Volver: {e}")

def seleccionar_fecha(driver, fecha_obj):
    """Abre el calendario, navega hasta el mes correcto y selecciona el d√≠a correspondiente."""
    wait = WebDriverWait(driver, 15)
    wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, CALENDAR_BUTTON_SELECTOR))).click()
    wait.until(EC.visibility_of_element_located((By.CSS_SELECTOR, ".ui-datepicker-calendar")))

    titulo_selector = ".ui-datepicker-title"
    meses = {
        "enero": 1, "febrero": 2, "marzo": 3, "abril": 4, "mayo": 5, "junio": 6,
        "julio": 7, "agosto": 8, "septiembre": 9, "octubre": 10, "noviembre": 11, "diciembre": 12
    }

    def obtener_mes_anio_actual():
        texto = wait.until(EC.visibility_of_element_located((By.CSS_SELECTOR, titulo_selector))).text.lower()
        partes = texto.split()
        mes_visible = meses[partes[0]]
        anio_visible = int(partes[1])
        return mes_visible, anio_visible

    mes_visible, anio_visible = obtener_mes_anio_actual()

    while (anio_visible, mes_visible) < (fecha_obj.year, fecha_obj.month):
        driver.find_element(By.CSS_SELECTOR, ".ui-datepicker-next").click()
        time.sleep(0.3)
        mes_visible, anio_visible = obtener_mes_anio_actual()

    while (anio_visible, mes_visible) > (fecha_obj.year, fecha_obj.month):
        driver.find_element(By.CSS_SELECTOR, ".ui-datepicker-prev").click()
        time.sleep(0.3)
        mes_visible, anio_visible = obtener_mes_anio_actual()

    dia_seleccionado = fecha_obj.day
    print(f"üìÖ Seleccionando {dia_seleccionado}/{fecha_obj.month}/{fecha_obj.year}")

    try:
        driver.find_element(By.XPATH, f"//a[text()='{dia_seleccionado}']").click()
        print(f"‚úÖ Fecha seleccionada correctamente: {fecha_obj.strftime('%d/%m/%Y')}")
    except Exception as e:
        print(f"‚ö†Ô∏è No se pudo seleccionar el d√≠a {dia_seleccionado}: {e}")


# ---------------------------------------------------------------------
# NUEVA FUNCI√ìN: SELECCIONAR PROYECTO
# ---------------------------------------------------------------------
def seleccionar_proyecto(driver, wait, nombre_proyecto):
    """
    Selecciona el proyecto en la tabla de imputaci√≥n.
    Si ya existe una l√≠nea con ese proyecto, la reutiliza.
    Si no existe, crea una nueva l√≠nea, abre el buscador,
    busca el proyecto y lo selecciona.
    Devuelve el elemento <tr> correspondiente al proyecto.
    """

    import unicodedata

    def normalizar(texto):
        """Normaliza acentos y min√∫sculas."""
        return ''.join(
            c for c in unicodedata.normalize('NFD', texto.lower())
            if unicodedata.category(c) != 'Mn'
        )

    try:
        # üîç Buscar si el proyecto ya existe
        selects = driver.find_elements(By.CSS_SELECTOR, "select[id^='listaEmpleadoHoras'][id$='.subproyecto']")
        for sel in selects:
            combinado = (sel.get_attribute("title") or sel.text or "").lower()
            if normalizar(nombre_proyecto) in normalizar(combinado):
                # Obtenemos la fila que contiene este select
                fila = sel.find_element(By.XPATH, "./ancestor::tr")
                print(f"üß© Proyecto '{nombre_proyecto}' ya existe, reutilizando su fila.")
                driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", fila)
                time.sleep(0.3)
                return fila  # ‚úÖ devolvemos la fila del proyecto

        # üÜï Si no existe ‚Üí a√±adimos nueva l√≠nea
        print("üÜï A√±adiendo nueva l√≠nea de imputaci√≥n...")
        btn_nueva_linea = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, "#btNuevaLinea")))
        btn_nueva_linea.click()
        time.sleep(1)

        # üî¢ Detectar el nuevo <select> (√∫ltimo en la lista)
        selects_actualizados = driver.find_elements(By.CSS_SELECTOR, "select[id^='listaEmpleadoHoras'][id$='.subproyecto']")
        nuevo_select = selects_actualizados[-1]
        fila = nuevo_select.find_element(By.XPATH, "./ancestor::tr")

        # üìå Buscar el bot√≥n ‚Äú¬ª‚Äù correspondiente dentro de la misma fila
        try:
            btn_cambiar = fila.find_element(By.CSS_SELECTOR, "input[id^='btCambiarSubproyecto']")
        except Exception:
            botones = driver.find_elements(By.CSS_SELECTOR, "input[id^='btCambiarSubproyecto']")
            btn_cambiar = botones[-1] if botones else None

        if btn_cambiar:
            print("üîç Abriendo buscador de proyectos...")
            driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", btn_cambiar)
            btn_cambiar.click()
        else:
            print("‚ö†Ô∏è No se encontr√≥ el bot√≥n '¬ª' para la nueva l√≠nea.")
            return None

        # 3Ô∏è‚É£ Esperar a que aparezca el campo de b√∫squeda
        print("‚åõ Esperando campo de b√∫squeda...")
        campo_buscar = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, "#textoBusqueda")))
        campo_buscar.clear()
        campo_buscar.send_keys(nombre_proyecto)

        # 4Ô∏è‚É£ Pulsar en el bot√≥n "Buscar"
        print(f"üîé Buscando proyecto: {nombre_proyecto}")
        btn_buscar = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, "#buscar")))
        btn_buscar.click()
        time.sleep(1.5)

        # 5Ô∏è‚É£ Expandir √°rbol de resultados
        print("üå≥ Expandiendo √°rbol de resultados...")
        driver.execute_script("""
            var tree = $('#treeTipologia');
            if (tree && tree.jstree) { tree.jstree('open_all'); }
        """)
        time.sleep(1)

        # 6Ô∏è‚É£ Buscar y seleccionar el proyecto
        print("üìÇ Seleccionando el proyecto en el √°rbol...")
        xpath = (
            f"//li[@rel='subproyectos']//a[contains(translate(normalize-space(.), "
            f"'ABCDEFGHIJKLMNOPQRSTUVWXYZ√Å√â√ç√ì√ö√ú', 'abcdefghijklmnopqrstuvwxyz√°√©√≠√≥√∫√º'), "
            f"'{normalizar(nombre_proyecto)}')]"
        )

        elemento = wait.until(EC.element_to_be_clickable((By.XPATH, xpath)))
        driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", elemento)
        elemento.click()
        time.sleep(1)

        print(f"‚úÖ Proyecto '{nombre_proyecto}' seleccionado correctamente.")
        return fila  # ‚úÖ devolvemos la fila asociada al proyecto

    except Exception as e:
        print(f"‚ö†Ô∏è No se pudo seleccionar el proyecto '{nombre_proyecto}': {e}")
        return None



def imputar_horas_semana(driver, wait, fila, nombre_proyecto=None):
    """
    Imputa las horas de lunes a viernes dentro de la fila (<tr>) del proyecto.
    Lunes a jueves ‚Üí 8.5 horas
    Viernes ‚Üí 6.5 horas
    Si un campo no est√° disponible (festivo, deshabilitado, etc.), lo omite.
    """
    print(f"üïí Imputando horas semanales "
          f"{'(proyecto ' + nombre_proyecto + ')' if nombre_proyecto else ''}...")

    horas_semana = {
        "h1": "8.5",
        "h2": "8.5",
        "h3": "8.5",
        "h4": "8.5",
        "h5": "6.5",
    }

    try:
        for dia, valor in horas_semana.items():
            try:
                campo = fila.find_element(By.CSS_SELECTOR, f"input[id$='.{dia}']")
                if campo.is_enabled():
                    campo.clear()
                    campo.send_keys(valor)
                    print(f"‚úÖ {dia.upper()} ‚Üí {valor} horas imputadas correctamente.")
                    time.sleep(0.2)
                else:
                    print(f"‚ö†Ô∏è {dia.upper()} no editable (posible festivo o bloqueo).")
            except Exception:
                print(f"‚ö†Ô∏è Campo para {dia.upper()} no encontrado (omitido).")

        print(f"‚úÖ Imputaci√≥n semanal completada "
              f"{'(proyecto ' + nombre_proyecto + ')' if nombre_proyecto else ''}.\n")

    except Exception as e:
        print(f"‚ùå Error imputando horas semanales en "
              f"{'(proyecto ' + nombre_proyecto + ')' if nombre_proyecto else ''}: {e}")




def imputar_horas_dia(driver, wait, dia, horas, fila, nombre_proyecto=None):
    """
    Imputa una cantidad espec√≠fica de horas en un d√≠a concreto (lunes a viernes)
    dentro de la fila (<tr>) del proyecto correspondiente.
    Si ya hay horas, las suma.
    """
    mapa_dias = {
        "lunes": "h1",
        "martes": "h2",
        "mi√©rcoles": "h3",
        "miercoles": "h3",
        "jueves": "h4",
        "viernes": "h5"
    }

    dia_clave = mapa_dias.get(dia.lower())
    if not dia_clave:
        print(f"‚ö†Ô∏è D√≠a no reconocido: {dia}")
        return

    print(f"üïì Imputando {horas}h el {dia} "
          f"{'(proyecto ' + nombre_proyecto + ')' if nombre_proyecto else ''}...")

    try:
        campo = fila.find_element(By.CSS_SELECTOR, f"input[id$='.{dia_clave}']")
        if campo.is_enabled():
            valor_actual = campo.get_attribute("value") or "0"
            try:
                valor_actual = float(valor_actual.replace(",", "."))
            except ValueError:
                valor_actual = 0.0

            nuevas_horas = float(horas)
            total = round(valor_actual + nuevas_horas, 2)

            campo.clear()
            campo.send_keys(str(total))
            print(f"‚úÖ {dia.capitalize()} ‚Üí {nuevas_horas} horas a√±adidas (total {total}) "
                  f"en {nombre_proyecto or 'proyecto'}.")
        else:
            print(f"‚ö†Ô∏è Campo de {dia.capitalize()} no editable en "
                  f"{nombre_proyecto or 'proyecto'} (posible bloqueo).")

    except Exception as e:
        print(f"‚ö†Ô∏è No se pudo imputar horas en {dia} "
              f"({nombre_proyecto or 'proyecto'}): {e}")




def guardar_linea(driver, wait):
    """Pulsa el bot√≥n 'Guardar' tras imputar horas."""
    try:
        btn_guardar = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, "#btGuardarLinea")))
        btn_guardar.click()
        time.sleep(1.5)
        print("üíæ L√≠nea guardada correctamente.")
    except Exception as e:
        print(f"‚ö†Ô∏è No se pudo pulsar el bot√≥n Guardar: {e}")

def emitir_linea(driver, wait):
    """Pulsa el bot√≥n 'Emitir' tras imputar horas."""
    try:
        btn_emitir = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, "#btEmitir")))
        btn_emitir.click()
        time.sleep(1.5)
        print("üì§ L√≠nea emitida correctamente.")
    except Exception as e:
        print(f"‚ö†Ô∏è No se pudo pulsar el bot√≥n Emitir: {e}")


def iniciar_jornada(driver, wait):
    """
    Pulsa el bot√≥n 'Inicio jornada' si est√° disponible.
    Si el bot√≥n no est√° o ya se ha pulsado, lo ignora.
    """
    print("üïí Intentando iniciar jornada...")

    try:
        btn_inicio = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, "#botonInicioJornada")))

        if btn_inicio.is_enabled():
            btn_inicio.click()
            time.sleep(2)
            print("‚úÖ Jornada iniciada correctamente.")
        else:
            print("‚ö†Ô∏è El bot√≥n de inicio de jornada no est√° habilitado (posible jornada ya iniciada).")

    except Exception as e:
        print(f"‚ö†Ô∏è No se pudo iniciar la jornada: {e}")

def finalizar_jornada(driver, wait):
    """
    Pulsa el bot√≥n 'Finalizar jornada' si est√° disponible.
    Si el bot√≥n no est√° o ya se ha pulsado, lo ignora.
    """
    print("üïì Intentando finalizar jornada...")

    try:
        btn_fin = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, "#botonFinJornada")))

        if btn_fin.is_enabled():
            btn_fin.click()
            time.sleep(2)
            print("‚úÖ Jornada finalizada correctamente.")
        else:
            print("‚ö†Ô∏è El bot√≥n de finalizar jornada no est√° habilitado (posible jornada ya cerrada).")

    except Exception as e:
        print(f"‚ö†Ô∏è No se pudo finalizar la jornada: {e}")




# ---------------------------------------------------------------------
# INTERPRETACI√ìN REAL CON GPT
# ---------------------------------------------------------------------
def interpretar_con_gpt(texto):

    hoy = datetime.now().strftime("%Y-%m-%d")
    dia_semana = datetime.now().strftime("%A")
    """
    Traduce la frase del usuario en una lista de comandos JSON para automatizar
    la imputaci√≥n de horas en la intranet.

    Acciones posibles:
    - seleccionar_fecha (requiere 'fecha' en formato YYYY-MM-DD)
    - volver
    - seleccionar_proyecto (requiere 'nombre')
    - imputar_horas_semana
    - iniciar_jornada

    Reglas:
    1. Siempre asume que el a√±o es 2025, aunque el usuario no lo diga.
    2. Si el usuario dice "esta semana", "la pr√≥xima", etc., genera la fecha del lunes de esa semana en 2025.
    3. Si el usuario mezcla acciones (como "imputa horas en el proyecto X la semana del 7 de octubre"),
       **primero debe ir la fecha**, luego el proyecto, y al final la imputaci√≥n.
    4. Devuelve SOLO una lista JSON v√°lida (sin texto adicional).
    5. Si no se puede interpretar algo, ign√≥ralo.
    """

    prompt = f"""
Eres un asistente que traduce frases en una lista de comandos JSON para automatizar
una web de imputaci√≥n de horas. Hoy es {hoy} ({dia_semana}).

Acciones v√°lidas:
- seleccionar_fecha (requiere "fecha" en formato YYYY-MM-DD)
- volver
- seleccionar_proyecto (requiere "nombre")
- imputar_horas_dia (requiere "dia" y "horas")
- imputar_horas_semana
- iniciar_jornada
- finalizar_jornada
- guardar_linea
- emitir_linea

Reglas:
1Ô∏è‚É£ Siempre usa el a√±o 2025 aunque el usuario no lo diga.
2Ô∏è‚É£ Si el usuario dice "hoy", la fecha es {hoy}.
3Ô∏è‚É£ Si el usuario dice "ayer" o "ma√±ana", calcula la fecha correspondiente a partir de {hoy}.
5Ô∏è‚É£ Si el usuario menciona varios proyectos y horas en la misma frase (por ejemplo:
    "3.5 en Desarrollo y 2 en Direcci√≥n el lunes"),
    genera varias acciones intercaladas en este orden:
    seleccionar_proyecto ‚Üí imputar_horas_dia ‚Üí seleccionar_proyecto ‚Üí imputar_horas_dia.
    As√≠ cada imputaci√≥n se asocia al proyecto anterior.
6Ô∏è‚É£ Si menciona "expide", "emite", "env√≠a", "env√≠alo", "exp√≠delo" o similares,
    a√±ade una acci√≥n {{"accion": "emitir_linea"}} al final.
7Ô∏è‚É£ Si no menciona ninguna de esas palabras, a√±ade {{"accion": "guardar_linea"}} despu√©s de imputar horas.
8Ô∏è‚É£ Si dice "quita", "resta", "borra" o "elimina", las horas deben ser NEGATIVAS (por ejemplo -2).
9Ô∏è‚É£ Si dice "suma", "a√±ade", "agrega" o "pon", las horas son POSITIVAS.
üîü Si el usuario no menciona d√≠a, asume el d√≠a actual ({hoy}).

3Ô∏è‚É£ Si la frase incluye varias acciones, ord√©nalas SIEMPRE as√≠:
   - seleccionar_fecha primero (si procede)
   - luego seleccionar_proyecto
   - luego imputar_horas_dia o imputar_horas_semana
   - finalmente guardar_linea o emitir_linea (si aplica)

‚ùó Solo incluye {{"accion": "iniciar_jornada"}} si el usuario dice expl√≠citamente
   frases como "inicia jornada", "empieza jornada", "comienza el d√≠a" o similares.

4Ô∏è‚É£ Devuelve SOLO un JSON v√°lido (nada de texto explicativo ni comentarios).
5Ô∏è‚É£ Si algo no se entiende, om√≠telo.

Ejemplo correcto:
[
  {{"accion": "seleccionar_fecha", "parametros": {{"fecha": "{hoy}"}}}},
  {{"accion": "seleccionar_proyecto", "parametros": {{"nombre": "Desarrollo"}}}},
  {{"accion": "imputar_horas_dia", "parametros": {{"dia": "{hoy}", "horas": 2}}}},
  {{"accion": "seleccionar_proyecto", "parametros": {{"nombre": "Estudio"}}}},
  {{"accion": "imputar_horas_dia", "parametros": {{"dia": "{hoy}", "horas": 3}}}},
  {{"accion": "guardar_linea"}}
]

Frase del usuario: "{texto}"
"""

    try:
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": "Eres un traductor de lenguaje natural a comandos JSON."},
                {"role": "user", "content": prompt}
            ],
            temperature=0
        )

        raw = response.choices[0].message.content.strip()
        data = json.loads(raw)

        # Si devuelve un solo objeto, lo convertimos a lista
        if isinstance(data, dict):
            data = [data]

        # üß† Reordenar acciones: fecha ‚Üí proyecto ‚Üí imputaci√≥n
        orden_correcto = ["seleccionar_fecha", "seleccionar_proyecto",
                          "imputar_horas_dia", "imputar_horas_semana", "volver"]
        data = sorted(data, key=lambda x: orden_correcto.index(
            x["accion"]) if x["accion"] in orden_correcto else 99)

        return data

    except Exception as e:
        print("‚ö†Ô∏è Error interpretando respuesta del modelo:", e)
        return []



# ---------------------------------------------------------------------
# EJECUTAR ACCI√ìN
# ---------------------------------------------------------------------
def ejecutar_accion(driver, wait, orden, contexto):
    """
    Ejecuta la acci√≥n recibida desde el modelo de IA.
    El par√°metro `contexto` mantiene informaci√≥n temporal,
    como la fila del proyecto actualmente seleccionado.
    """
    accion = orden.get("accion")

    # üïí Iniciar jornada
    if accion == "iniciar_jornada":
        iniciar_jornada(driver, wait)

    # üïì Finalizar jornada
    elif accion == "finalizar_jornada":
        finalizar_jornada(driver, wait)

    # üìÖ Seleccionar fecha
    elif accion == "seleccionar_fecha":
        try:
            fecha = datetime.fromisoformat(orden["parametros"]["fecha"])
            seleccionar_fecha(driver, fecha)
        except Exception as e:
            print("‚ùå No se pudo procesar la fecha:", e)

    # üìÇ Seleccionar proyecto
    elif accion == "seleccionar_proyecto":
        try:
            nombre = orden["parametros"].get("nombre")
            fila = seleccionar_proyecto(driver, wait, nombre)
            if fila:
                contexto["fila_actual"] = fila
                contexto["proyecto_actual"] = nombre
            else:
                print("‚ö†Ô∏è No se pudo obtener la fila del proyecto.")
        except Exception as e:
            print(f"‚ö†Ô∏è Error seleccionando proyecto: {e}")

    # ‚è±Ô∏è Imputar horas del d√≠a
    elif accion == "imputar_horas_dia":
        try:
            dia_param = orden["parametros"].get("dia")
            horas = float(orden["parametros"].get("horas", 0))
            fila = contexto.get("fila_actual")
            proyecto = contexto.get("proyecto_actual", "Desconocido")

            if not fila:
                print("‚ö†Ô∏è No hay proyecto seleccionado para imputar horas.")
                return

            # Si GPT devuelve una fecha ISO ‚Üí convertir a nombre de d√≠a
            try:
                fecha_obj = datetime.fromisoformat(dia_param)
                dia = fecha_obj.strftime("%A").lower()
                dias_map = {
                    "monday": "lunes",
                    "tuesday": "martes",
                    "wednesday": "mi√©rcoles",
                    "thursday": "jueves",
                    "friday": "viernes"
                }
                dia = dias_map.get(dia, dia)
            except Exception:
                dia = dia_param.lower()

            imputar_horas_dia(driver, wait, dia, horas, fila, proyecto)

        except Exception as e:
            print(f"‚ùå Error al imputar horas del d√≠a: {e}")

    # ‚è±Ô∏è Imputar horas semanales
    elif accion == "imputar_horas_semana":
        fila = contexto.get("fila_actual")
        proyecto = contexto.get("proyecto_actual", "Desconocido")

        if not fila:
            print("‚ö†Ô∏è No hay proyecto seleccionado para imputar la semana.")
            return

        imputar_horas_semana(driver, wait, fila, proyecto)

    # üíæ Guardar l√≠nea
    elif accion == "guardar_linea":
        guardar_linea(driver, wait)

    # üì§ Emitir l√≠nea
    elif accion == "emitir_linea":
        emitir_linea(driver, wait)

    # ‚Ü©Ô∏è Volver a inicio
    elif accion == "volver":
        volver_inicio(driver)

    # ‚ùì Desconocido
    else:
        print("ü§î No entiendo la instrucci√≥n o no est√° implementada todav√≠a.")



# ---------------------------------------------------------------------
# MAIN LOOP
# ---------------------------------------------------------------------
def main():
    service = ChromeService(ChromeDriverManager().install())
    options = webdriver.ChromeOptions()
    driver = webdriver.Chrome(service=service, options=options)
    wait = WebDriverWait(driver, 15)

    # üöÄ Login autom√°tico al inicio
    hacer_login(driver, wait)

    print("\nüß† Asistente con IA (OpenAI) para imputaci√≥n de horas")
    print("Ya est√°s logueado en el sistema.")
    print("Puedes decir cosas como:")
    print(" - 'selecciona la semana del 7 de octubre'")
    print(" - 'abre el proyecto Estudio/Investigaci√≥n de tecnolog√≠a o proyecto cliente'")
    print(" - 'vuelve a la pantalla principal'")
    print("Escribe 'salir' para terminar.\n")

    try:
        contexto = {"fila_actual": None, "proyecto_actual": None}

        while True:
            texto = input("üó£Ô∏è  > ")
            if texto.lower() in ["salir", "exit", "quit"]:
                break

            ordenes = interpretar_con_gpt(texto)
            print("üßæ Interpretaci√≥n:", ordenes)

            # üîÑ Reordenar: siempre primero la fecha, luego el resto
            ordenes = sorted(ordenes, key=lambda o: 0 if o["accion"] == "seleccionar_fecha" else 1)

            # üß† Nueva ejecuci√≥n agrupada: proyecto + horas
            i = 0
            while i < len(ordenes):
                orden = ordenes[i]
                accion = orden.get("accion")

                # üëâ Si es un proyecto, lo seleccionamos y verificamos si la siguiente acci√≥n son horas
                if accion == "seleccionar_proyecto":
                    nombre = orden["parametros"].get("nombre")
                    linea_index = seleccionar_proyecto(driver, wait, nombre)
                    contexto["fila_actual"] = linea_index
                    contexto["proyecto_actual"] = nombre

                    # Si la siguiente acci√≥n es imputar horas, ejecutarla inmediatamente
                    if i + 1 < len(ordenes) and ordenes[i + 1]["accion"] == "imputar_horas_dia":
                        siguiente = ordenes[i + 1]
                        dia_param = siguiente["parametros"].get("dia")
                        horas = float(siguiente["parametros"].get("horas"))

                        # convertir la fecha ISO en nombre del d√≠a
                        try:
                            fecha_obj = datetime.fromisoformat(dia_param)
                            dia = fecha_obj.strftime("%A").lower()
                            dias_map = {
                                "monday": "lunes",
                                "tuesday": "martes",
                                "wednesday": "mi√©rcoles",
                                "thursday": "jueves",
                                "friday": "viernes"
                            }
                            dia = dias_map.get(dia, dia)
                        except Exception:
                            dia = dia_param.lower()

                        imputar_horas_dia(driver, wait, dia, horas, linea_index, nombre)
                        i += 1  # saltar la imputaci√≥n ya procesada

                # üëâ Si no es seleccionar_proyecto, ejecutar normalmente
                else:
                    ejecutar_accion(driver, wait, orden, contexto)

                i += 1

    finally:
        driver.quit()
        print("üîö Navegador cerrado.")


# ---------------------------------------------------------------------
if __name__ == "__main__":
    main()
