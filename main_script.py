def eliminar_linea_proyecto(driver, wait, nombre_proyecto):
    """
    Elimina una l√≠nea de proyecto completa.
    Busca el proyecto, encuentra su bot√≥n de eliminar y lo pulsa.
    """
    import unicodedata

    def normalizar(texto):
        return ''.join(
            c for c in unicodedata.normalize('NFD', texto.lower())
            if unicodedata.category(c) != 'Mn'
        )

    try:
        # Buscar el proyecto en la tabla
        selects = driver.find_elements(By.CSS_SELECTOR, "select[name*='subproyecto']")
        
        if not selects:
            selects = driver.find_elements(By.CSS_SELECTOR, "select[id*='subproyecto']")
        
        print(f"[DEBUG] üóëÔ∏è Buscando proyecto '{nombre_proyecto}' para eliminar...")
        
        for idx, sel in enumerate(selects):
            # Leer el nombre del proyecto
            title = sel.get_attribute("title") or ""
            
            try:
                texto_selected = driver.execute_script("""
                    var select = arguments[0];
                    var selectedOption = select.options[select.selectedIndex];
                    return selectedOption ? selectedOption.text : '';
                """, sel)
            except:
                texto_selected = ""
            
            texto_completo = f"{title} {texto_selected}".lower()
            
            # Si encontramos el proyecto
            if normalizar(nombre_proyecto) in normalizar(texto_completo):
                # Buscar el bot√≥n de eliminar en la misma fila
                fila = sel.find_element(By.XPATH, "./ancestor::tr")
                
                try:
                    btn_eliminar = fila.find_element(By.CSS_SELECTOR, "button.botonEliminar, button#botonEliminar")
                    driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", btn_eliminar)
                    time.sleep(0.3)
                    btn_eliminar.click()
                    time.sleep(1)
                    
                    print(f"[DEBUG] ‚úÖ L√≠nea del proyecto '{nombre_proyecto}' eliminada")
                    return f"He eliminado la l√≠nea del proyecto '{nombre_proyecto}'"
                    
                except Exception as e:
                    return f"Encontr√© el proyecto pero no pude eliminar la l√≠nea: {e}"
        
        return f"No encontr√© ninguna l√≠nea con el proyecto '{nombre_proyecto}'"
    
    except Exception as e:
        return f"Error al intentar eliminar la l√≠nea: {e}"

from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.chrome.service import Service as ChromeService
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from webdriver_manager.chrome import ChromeDriverManager
from datetime import datetime, timedelta
from openai import OpenAI
from dotenv import load_dotenv
import time, json, os


# --- CARGAR VARIABLES DEL .env ---
load_dotenv()  # Carga OPENAI_API_KEY, INTRA_USER, INTRA_PASS, etc.
# -------------------

# --- CONFIGURAR ---
LOGIN_URL = os.getenv("URL_PRIVADA")
USERNAME = os.getenv("INTRA_USER")
PASSWORD = os.getenv("INTRA_PASS")
USERNAME_SELECTOR = '#usuario'
PASSWORD_SELECTOR = '#password'
SUBMIT_SELECTOR = '#btAceptar'
CALENDAR_BUTTON_SELECTOR = '.ui-datepicker-trigger'
VOLVER_SELECTOR = '#btVolver'
BUSCADOR_INPUT_SELECTOR = '#textoBusqueda'
BUSCADOR_BOTON_SELECTOR = '#buscar'
# -------------------

hoy = datetime.now()

# Crear cliente OpenAI con la clave del .env
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# Variable global para acumular respuestas
respuestas_acumuladas = []

# Historial conversacional para GPT
historial_conversacion = []

# ---------------------------------------------------------------------
# GENERAR RESPUESTA NATURAL CON GPT
# ---------------------------------------------------------------------
def generar_respuesta_natural(acciones_ejecutadas, entrada_usuario):
    """
    Usa GPT para generar una respuesta natural basada en las acciones ejecutadas.
    """
    if not acciones_ejecutadas:
        return "No he entendido qu√© quieres que haga. ¬øPodr√≠as reformularlo?"
    
    # Crear resumen de acciones
    resumen_acciones = "\n".join([f"- {acc}" for acc in acciones_ejecutadas])
    
    prompt = f"""Eres un asistente virtual amigable de imputaci√≥n de horas laborales.

El usuario te dijo: "{entrada_usuario}"

Has ejecutado las siguientes acciones:
{resumen_acciones}

Genera una respuesta natural, breve y amigable (m√°ximo 2-3 l√≠neas) confirmando lo que has hecho.
Usa un tono conversacional, cercano y profesional. Puedes usar emojis ocasionalmente.
No inventes informaci√≥n que no est√© en las acciones ejecutadas.

Ejemplos de buen estilo:
- "¬°Listo! He imputado 8 horas en Desarrollo para hoy y lo he guardado todo."
- "Perfecto, ya tienes toda la semana imputada en el proyecto Estudio. He guardado los cambios."
- "He iniciado tu jornada laboral. ¬°A trabajar! üí™"

Respuesta:"""
    
    try:
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": "Eres un asistente virtual amigable y profesional que confirma tareas completadas de forma natural."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.7,
            max_tokens=150
        )
        
        respuesta = response.choices[0].message.content.strip()
        return respuesta
    
    except Exception as e:
        # Fallback: si falla GPT, unir las respuestas simples
        return " ¬∑ ".join(acciones_ejecutadas)

# ---------------------------------------------------------------------
# FUNCIONES BASE
# ---------------------------------------------------------------------
def save_cookies(driver, path="cookies.json"):
    with open(path, "w") as f:
        json.dump(driver.get_cookies(), f)

def lunes_de_semana(fecha):
    return fecha - timedelta(days=fecha.weekday())

def hacer_login(driver, wait, username=None, password=None):
    """Realiza el login en la intranet con las credenciales proporcionadas.
    
    Returns:
        tuple: (success: bool, message: str)
            - success: True si el login fue exitoso, False si fall√≥
            - message: Mensaje descriptivo del resultado
    """
    # Si no se proporcionan credenciales, usar las del .env (modo compatibilidad)
    if username is None:
        username = USERNAME
    if password is None:
        password = PASSWORD
    
    try:
        driver.get(LOGIN_URL)
        usr = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, USERNAME_SELECTOR)))
        usr.clear()
        usr.send_keys(username)
        pwd = driver.find_element(By.CSS_SELECTOR, PASSWORD_SELECTOR)
        pwd.clear()
        pwd.send_keys(password)
        driver.find_element(By.CSS_SELECTOR, SUBMIT_SELECTOR).click()
        time.sleep(3)
        
        # üîç Verificar si hay error de login
        try:
            error_div = driver.find_element(By.CSS_SELECTOR, ".errorLogin, div[class*='error']")
            if error_div.is_displayed():
                error_text = error_div.text.strip()
                print(f"[DEBUG] ‚ùå Error de login detectado: {error_text}")
                return False, "credenciales_invalidas"
        except:
            # No hay div de error, el login fue exitoso
            pass
        
        # ‚úÖ Login exitoso
        return True, "login_exitoso"
        
    except Exception as e:
        print(f"[DEBUG] ‚ùå Excepci√≥n durante login: {e}")
        return False, f"error_tecnico: {e}"

def volver_inicio(driver):
    """Pulsa el bot√≥n 'Volver' para regresar a la pantalla principal tras login."""
    try:
        btn_volver = driver.find_element(By.CSS_SELECTOR, VOLVER_SELECTOR)
        btn_volver.click()
        time.sleep(2)
        return "He vuelto a la pantalla principal"
    except Exception as e:
        return f"No he podido volver a la pantalla principal: {e}"

def seleccionar_fecha(driver, fecha_obj):
    """Abre el calendario, navega hasta el mes correcto y selecciona el d√≠a correspondiente."""
    
    # üîç Detectar si estamos en la pantalla de imputaci√≥n
    try:
        btn_volver = driver.find_element(By.CSS_SELECTOR, "#btVolver")
        if btn_volver.is_displayed():
            print("[DEBUG] üîô Detectada pantalla de imputaci√≥n, volviendo para cambiar fecha...")
            btn_volver.click()
            time.sleep(2)
    except:
        # No hay bot√≥n volver, ya estamos donde debemos
        pass
    
    wait = WebDriverWait(driver, 15)
    wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, CALENDAR_BUTTON_SELECTOR))).click()
    wait.until(EC.visibility_of_element_located((By.CSS_SELECTOR, ".ui-datepicker-calendar")))

    titulo_selector = ".ui-datepicker-title"
    meses = {
        "enero": 1, "febrero": 2, "marzo": 3, "abril": 4, "mayo": 5, "junio": 6,
        "julio": 7, "agosto": 8, "septiembre": 9, "octubre": 10, "noviembre": 11, "diciembre": 12
    }

    def obtener_mes_anio_actual():
        texto = wait.until(EC.visibility_of_element_located((By.CSS_SELECTOR, titulo_selector))).text.lower()
        partes = texto.split()
        mes_visible = meses[partes[0]]
        anio_visible = int(partes[1])
        return mes_visible, anio_visible

    mes_visible, anio_visible = obtener_mes_anio_actual()

    while (anio_visible, mes_visible) < (fecha_obj.year, fecha_obj.month):
        driver.find_element(By.CSS_SELECTOR, ".ui-datepicker-next").click()
        time.sleep(0.3)
        mes_visible, anio_visible = obtener_mes_anio_actual()

    while (anio_visible, mes_visible) > (fecha_obj.year, fecha_obj.month):
        driver.find_element(By.CSS_SELECTOR, ".ui-datepicker-prev").click()
        time.sleep(0.3)
        mes_visible, anio_visible = obtener_mes_anio_actual()

    dia_seleccionado = fecha_obj.day

    try:
        driver.find_element(By.XPATH, f"//a[text()='{dia_seleccionado}']").click()
        fecha_formateada = fecha_obj.strftime('%d/%m/%Y')
        time.sleep(2)  # ‚è∏Ô∏è Esperar a que cargue la pantalla de imputaci√≥n
        return f"He seleccionado la fecha {fecha_formateada}"
    except Exception as e:
        return f"No he podido seleccionar el d√≠a {dia_seleccionado}: {e}"


# ---------------------------------------------------------------------
# NUEVA FUNCI√ìN: SELECCIONAR PROYECTO
# ---------------------------------------------------------------------
def seleccionar_proyecto(driver, wait, nombre_proyecto):
    """
    Selecciona el proyecto en la tabla de imputaci√≥n.
    Si ya existe una l√≠nea con ese proyecto, la reutiliza.
    Si no existe, crea una nueva l√≠nea, abre el buscador,
    busca el proyecto y lo selecciona.
    Devuelve el elemento <tr> correspondiente al proyecto.
    """

    import unicodedata

    def normalizar(texto):
        """Normaliza acentos y min√∫sculas."""
        return ''.join(
            c for c in unicodedata.normalize('NFD', texto.lower())
            if unicodedata.category(c) != 'Mn'
        )

    try:
        # ‚è∏Ô∏è Dar tiempo a que la p√°gina se estabilice tras guardar
        time.sleep(0.5)
        
        # üîç Buscar si el proyecto ya existe en TODAS las l√≠neas (guardadas o no)
        selects = driver.find_elements(By.CSS_SELECTOR, "select[name*='subproyecto']")
        
        # Si no encuentra por name, intentar por id
        if not selects:
            selects = driver.find_elements(By.CSS_SELECTOR, "select[id*='subproyecto']")
        
        print(f"[DEBUG] üîç Buscando proyecto '{nombre_proyecto}' en {len(selects)} l√≠neas totales...")
        
        for idx, sel in enumerate(selects):
            # Verificar si el select est√° disabled (guardado)
            is_disabled = sel.get_attribute("disabled")
            estado = "guardada" if is_disabled else "editable"
            
            # Obtener el texto de la opci√≥n seleccionada usando JavaScript
            try:
                texto_completo = driver.execute_script("""
                    var select = arguments[0];
                    var selectedOption = select.options[select.selectedIndex];
                    return selectedOption ? selectedOption.text : '';
                """, sel)
            except:
                texto_completo = ""
            
            if not texto_completo or texto_completo == "Seleccione opci√≥n":
                print(f"[DEBUG]   L√≠nea {idx+1} ({estado}): Vac√≠a o sin selecci√≥n")
                continue
            
            # üéØ CR√çTICO: Extraer SOLO la √∫ltima parte (el proyecto real)
            # Ejemplo: "Arelance - Departamento - Desarrollo" ‚Üí "Desarrollo"
            partes = texto_completo.split(' - ')
            nombre_proyecto_real = partes[-1].strip() if partes else ""
            
            print(f"[DEBUG]   L√≠nea {idx+1} ({estado}): '{texto_completo}' ‚Üí Proyecto: '{nombre_proyecto_real}'")
            
            # üéØ B√öSQUEDA FLEXIBLE: Comparar si el nombre buscado est√° CONTENIDO en el nombre real
            # Esto permite que "Estudio" coincida con "Estudio/Investigaci√≥n"
            nombre_buscado_norm = normalizar(nombre_proyecto)
            nombre_real_norm = normalizar(nombre_proyecto_real)
            
            # Coincidencia si:
            # 1. Son exactamente iguales, O
            # 2. El nombre buscado est√° contenido en el nombre real
            if nombre_buscado_norm == nombre_real_norm or nombre_buscado_norm in nombre_real_norm:
                # Si el proyecto YA est√° guardado (disabled), reutilizamos esa fila
                if is_disabled:
                    print(f"[DEBUG] ‚úÖ ¬°Proyecto '{nombre_proyecto}' encontrado en l√≠nea {idx+1} (GUARDADA)! Reutilizando...")
                    fila = sel.find_element(By.XPATH, "./ancestor::tr")
                    driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", fila)
                    time.sleep(0.3)
                    return fila, f"He encontrado el proyecto '{nombre_proyecto}' ya guardado, a√±adiendo horas"
                
                # Si el proyecto est√° en una l√≠nea editable (no guardada), tambi√©n la reutilizamos
                else:
                    print(f"[DEBUG] ‚úÖ ¬°Proyecto '{nombre_proyecto}' encontrado en l√≠nea {idx+1} (EDITABLE)! Reutilizando...")
                    fila = sel.find_element(By.XPATH, "./ancestor::tr")
                    driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", fila)
                    time.sleep(0.3)
                    return fila, f"Ya ten√≠as el proyecto '{nombre_proyecto}' abierto, lo estoy usando"

        # üÜï Si no existe ‚Üí a√±adimos nueva l√≠nea
        print(f"[DEBUG] ‚ûï Proyecto '{nombre_proyecto}' NO encontrado, a√±adiendo nueva l√≠nea...")
        btn_nueva_linea = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, "#btNuevaLinea")))
        btn_nueva_linea.click()
        time.sleep(1)

        # üî¢ Detectar el nuevo <select> (√∫ltimo en la lista)
        selects_actualizados = driver.find_elements(By.CSS_SELECTOR, "select[id^='listaEmpleadoHoras'][id$='.subproyecto']")
        nuevo_select = selects_actualizados[-1]
        fila = nuevo_select.find_element(By.XPATH, "./ancestor::tr")

        # üìå Buscar el bot√≥n "¬ª" correspondiente dentro de la misma fila
        try:
            btn_cambiar = fila.find_element(By.CSS_SELECTOR, "input[id^='btCambiarSubproyecto']")
        except Exception:
            botones = driver.find_elements(By.CSS_SELECTOR, "input[id^='btCambiarSubproyecto']")
            btn_cambiar = botones[-1] if botones else None

        if btn_cambiar:
            driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", btn_cambiar)
            btn_cambiar.click()
        else:
            return None, f"No he encontrado el bot√≥n para buscar el proyecto '{nombre_proyecto}'"

        # 3Ô∏è‚É£ Esperar a que aparezca el campo de b√∫squeda
        campo_buscar = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, "#textoBusqueda")))
        campo_buscar.clear()
        campo_buscar.send_keys(nombre_proyecto)

        # 4Ô∏è‚É£ Pulsar en el bot√≥n "Buscar"
        btn_buscar = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, "#buscar")))
        btn_buscar.click()
        time.sleep(1.5)

        # 5Ô∏è‚É£ Expandir √°rbol de resultados
        driver.execute_script("""
            var tree = $('#treeTipologia');
            if (tree && tree.jstree) { tree.jstree('open_all'); }
        """)
        time.sleep(1)

        # 6Ô∏è‚É£ Buscar y seleccionar el proyecto
        # IMPORTANTE: NO normalizar (quitar tildes) porque el sistema es sensible a tildes
        xpath = (
            f"//li[@rel='subproyectos']//a[contains(translate(normalize-space(.), "
            f"'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'), "
            f"'{nombre_proyecto.lower()}')]"
        )

        try:
            elemento = wait.until(EC.element_to_be_clickable((By.XPATH, xpath)))
            driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", elemento)
            elemento.click()
            time.sleep(1)

            return fila, f"He abierto el proyecto '{nombre_proyecto}'"
            
        except Exception as e:
            # üõë CR√çTICO: Si no encuentra el proyecto, cerrar todo y devolver error
            print(f"[DEBUG] ‚ùå No se encontr√≥ el proyecto '{nombre_proyecto}' en el sistema")
            
            # Cerrar el overlay del buscador
            try:
                driver.execute_script("""
                    document.getElementById('textoBusqueda').value='Introduzca proyecto/tipologia';
                    document.getElementById('textoBusqueda').style.color='gray';
                    buscadorJTree();
                    var tree = $('#treeTipologia');
                    tree.jstree('deselect_all');
                    tree.jstree('close_all');
                    hideOverlay();
                """)
                time.sleep(0.5)
            except Exception as close_error:
                print(f"[DEBUG] ‚ö†Ô∏è Error cerrando overlay: {close_error}")
            
            # Eliminar la l√≠nea vac√≠a que qued√≥
            try:
                btn_eliminar = fila.find_element(By.CSS_SELECTOR, "button.botonEliminar, button#botonEliminar, input[id*='btEliminar']")
                driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", btn_eliminar)
                time.sleep(0.2)
                btn_eliminar.click()
                time.sleep(0.5)
                print(f"[DEBUG] üóëÔ∏è L√≠nea vac√≠a eliminada")
            except Exception as del_error:
                print(f"[DEBUG] ‚ö†Ô∏è No se pudo eliminar la l√≠nea vac√≠a: {del_error}")
            
            # üõë Devolver None para indicar ERROR y detener la ejecuci√≥n
            return None, f"‚ùå No he encontrado el proyecto '{nombre_proyecto}' en el sistema. Verifica el nombre e int√©ntalo de nuevo."

    except Exception as e:
        return None, f"No he podido seleccionar el proyecto '{nombre_proyecto}': {e}"



def imputar_horas_semana(driver, wait, fila, nombre_proyecto=None):
    """
    Imputa las horas de lunes a viernes dentro de la fila (<tr>) del proyecto.
    Lunes a jueves ‚Üí 8.5 horas
    Viernes ‚Üí 6.5 horas
    Si un campo no est√° disponible (festivo, deshabilitado, etc.), lo omite.
    """
    horas_semana = {
        "lunes": "8.5",
        "martes": "8.5",
        "mi√©rcoles": "8.5",
        "jueves": "8.5",
        "viernes": "6.5",
    }
    
    dias_keys = {
        "lunes": "h1",
        "martes": "h2",
        "mi√©rcoles": "h3",
        "jueves": "h4",
        "viernes": "h5",
    }
    
    dias_imputados = []

    try:
        for dia_nombre, valor in horas_semana.items():
            try:
                campo = fila.find_element(By.CSS_SELECTOR, f"input[id$='.{dias_keys[dia_nombre]}']")
                if campo.is_enabled():
                    campo.clear()
                    campo.send_keys(valor)
                    dias_imputados.append(f"{dia_nombre} ({valor}h)")
                    time.sleep(0.2)
            except Exception:
                pass

        if dias_imputados:
            dias_texto = ", ".join(dias_imputados)
            proyecto_texto = f"en el proyecto {nombre_proyecto}" if nombre_proyecto else ""
            return f"He imputado toda la semana {proyecto_texto}: {dias_texto}"
        else:
            return f"No he podido imputar ning√∫n d√≠a (puede que est√©n bloqueados o sean festivos)"

    except Exception as e:
        return f"Ha habido un problema al imputar la semana: {e}"




def borrar_todas_horas_dia(driver, wait, dia):
    """
    Pone a 0 las horas de TODOS los proyectos en un d√≠a espec√≠fico.
    Busca todas las l√≠neas de la tabla y pone 0 en la columna del d√≠a indicado.
    """
    mapa_dias = {
        "lunes": "h1", "martes": "h2", "mi√©rcoles": "h3",
        "miercoles": "h3", "jueves": "h4", "viernes": "h5"
    }

    dia_clave = mapa_dias.get(dia.lower())
    if not dia_clave:
        return f"No reconozco el d√≠a '{dia}'"

    try:
        # Buscar TODAS las filas de proyectos
        selects = driver.find_elements(By.CSS_SELECTOR, "select[name*='subproyecto']")
        if not selects:
            selects = driver.find_elements(By.CSS_SELECTOR, "select[id*='subproyecto']")
        
        proyectos_modificados = []
        
        for idx, sel in enumerate(selects):
            try:
                # Obtener el nombre del proyecto
                proyecto_nombre = driver.execute_script("""
                    var select = arguments[0];
                    var selectedOption = select.options[select.selectedIndex];
                    return selectedOption ? selectedOption.text : '';
                """, sel)
                
                if not proyecto_nombre or proyecto_nombre == "Seleccione opci√≥n":
                    continue
                
                # Extraer solo el nombre del proyecto (√∫ltima parte)
                partes = proyecto_nombre.split(' - ')
                nombre_corto = partes[-1].strip() if partes else proyecto_nombre
                
                # Buscar la fila
                fila = sel.find_element(By.XPATH, "./ancestor::tr")
                
                # Buscar el campo de horas del d√≠a
                campo = fila.find_element(By.CSS_SELECTOR, f"input[id$='.{dia_clave}']")
                
                if campo.is_enabled():
                    valor_actual = campo.get_attribute("value") or "0"
                    try:
                        valor_actual = float(valor_actual.replace(",", "."))
                    except ValueError:
                        valor_actual = 0.0
                    
                    # Solo modificar si ten√≠a horas
                    if valor_actual > 0:
                        campo.clear()
                        campo.send_keys("0")
                        proyectos_modificados.append(f"{nombre_corto} ({valor_actual}h)")
                        time.sleep(0.2)
            
            except Exception as e:
                print(f"[DEBUG] ‚ö†Ô∏è Error procesando l√≠nea {idx+1}: {e}")
                continue
        
        if proyectos_modificados:
            proyectos_texto = ", ".join(proyectos_modificados)
            return f"He borrado las horas del {dia} en: {proyectos_texto}"
        else:
            return f"No hab√≠a horas que borrar el {dia}"
    
    except Exception as e:
        return f"No he podido borrar las horas del {dia}: {e}"


def imputar_horas_dia(driver, wait, dia, horas, fila, nombre_proyecto=None, modo="sumar"):
    """
    Imputa una cantidad espec√≠fica de horas en un d√≠a concreto.
    modo: "sumar" (default) a√±ade horas | "establecer" pone exactamente esa cantidad
    """
    mapa_dias = {
        "lunes": "h1", "martes": "h2", "mi√©rcoles": "h3",
        "miercoles": "h3", "jueves": "h4", "viernes": "h5"
    }

    dia_clave = mapa_dias.get(dia.lower())
    if not dia_clave:
        return f"No reconozco el d√≠a '{dia}'"

    try:
        campo = fila.find_element(By.CSS_SELECTOR, f"input[id$='.{dia_clave}']")
        if campo.is_enabled():
            valor_actual = campo.get_attribute("value") or "0"
            try:
                valor_actual = float(valor_actual.replace(",", "."))
            except ValueError:
                valor_actual = 0.0

            nuevas_horas = float(horas)
            
            if modo == "establecer":
                total = nuevas_horas
                campo.clear()
                campo.send_keys(str(total))
                proyecto_texto = f"en el proyecto {nombre_proyecto}" if nombre_proyecto else ""
                return f"He establecido {total}h el {dia} {proyecto_texto}"
            else:
                total = round(valor_actual + nuevas_horas, 2)
                campo.clear()
                campo.send_keys(str(total))
                proyecto_texto = f"en el proyecto {nombre_proyecto}" if nombre_proyecto else ""
                accion = "a√±adido" if nuevas_horas > 0 else "restado"
                
                if valor_actual > 0:
                    return f"He {accion} {abs(nuevas_horas)}h el {dia} {proyecto_texto} (total: {total}h)"
                else:
                    return f"He imputado {total}h el {dia} {proyecto_texto}"
        else:
            return f"El {dia} no est√° disponible para imputar"
    except Exception as e:
        return f"No he podido imputar horas el {dia}: {e}"



def guardar_linea(driver, wait):
    """Pulsa el bot√≥n 'Guardar' tras imputar horas."""
    try:
        btn_guardar = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, "#btGuardarLinea")))
        btn_guardar.click()
        time.sleep(1.5)
        
        # üîç Verificar si hay alg√∫n popup de error
        try:
            # Buscar el popup de error (puede tener diferentes clases)
            popup_error = driver.find_element(By.CSS_SELECTOR, ".ui-dialog, .modal, [role='dialog']")
            
            if popup_error.is_displayed():
                # Leer el mensaje de error
                try:
                    mensaje_error = popup_error.find_element(By.CSS_SELECTOR, ".ui-dialog-content, .modal-body, p").text
                    print(f"[DEBUG] ‚ö†Ô∏è Error detectado al guardar: {mensaje_error}")
                    
                    # Cerrar el popup haciendo clic en "Aceptar" o bot√≥n de cerrar
                    try:
                        btn_aceptar = popup_error.find_element(By.XPATH, ".//button[contains(text(), 'Aceptar') or contains(text(), 'OK') or contains(text(), 'Cerrar')]")
                        btn_aceptar.click()
                        time.sleep(0.5)
                    except:
                        # Si no encuentra el bot√≥n, intentar con Escape
                        driver.find_element(By.TAG_NAME, "body").send_keys(Keys.ESCAPE)
                        time.sleep(0.5)
                    
                    return f"‚ùå Error al guardar: {mensaje_error}"
                except:
                    return "‚ùå Error al guardar (no se pudo leer el mensaje de error)"
        except:
            # No hay popup de error, todo OK
            pass
        
        return "He guardado los cambios"
    except Exception as e:
        return f"No he podido guardar: {e}"

def emitir_linea(driver, wait):
    """Pulsa el bot√≥n 'Emitir' tras imputar horas y acepta el alert de confirmaci√≥n."""
    try:
        btn_emitir = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, "#btEmitir")))
        btn_emitir.click()
        
        # ‚è≥ Esperar a que aparezca el alert de confirmaci√≥n
        time.sleep(0.5)  # Peque√±a espera para que se muestre el alert
        
        try:
            # üì¢ Capturar el alert de JavaScript
            alert = wait.until(EC.alert_is_present())
            
            # üìù Leer el mensaje del alert (opcional, para debug)
            mensaje_alert = alert.text
            print(f"[DEBUG] üì¢ Alert detectado: '{mensaje_alert}'")
            
            # ‚úÖ Aceptar el alert (equivalente a pulsar "Aceptar")
            alert.accept()
            print(f"[DEBUG] ‚úÖ Alert aceptado")
            
            time.sleep(1.5)  # Esperar a que se procese la emisi√≥n
            return "He emitido las horas correctamente"
            
        except Exception as e_alert:
            # Si no hay alert o falla, continuar
            print(f"[DEBUG] ‚ö†Ô∏è No se detect√≥ alert o error al aceptarlo: {e_alert}")
            time.sleep(1.5)
            return "He pulsado emitir (no se detect√≥ confirmaci√≥n)"
            
    except Exception as e:
        return f"No he podido emitir: {e}"


def iniciar_jornada(driver, wait):
    """
    Pulsa el bot√≥n 'Inicio jornada' si est√° disponible.
    Si el bot√≥n no est√° o ya se ha pulsado, lo ignora.
    """
    try:
        # üîô Volver al inicio si estamos en pantalla de imputaci√≥n
        try:
            btn_volver = driver.find_element(By.CSS_SELECTOR, "#btVolver")
            if btn_volver.is_displayed():
                print("[DEBUG] üîô Volviendo al inicio antes de iniciar jornada...")
                btn_volver.click()
                time.sleep(2)
        except:
            pass  # Ya estamos en la pantalla correcta
        
        btn_inicio = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, "#botonInicioJornada")))

        if btn_inicio.is_enabled():
            btn_inicio.click()
            time.sleep(2)
            return "He iniciado tu jornada laboral"
        else:
            return "Tu jornada ya estaba iniciada"

    except Exception as e:
        return f"No he podido iniciar la jornada: {e}"

def finalizar_jornada(driver, wait):
    """
    Pulsa el bot√≥n 'Finalizar jornada' si est√° disponible.
    Si el bot√≥n no est√° o ya se ha pulsado, lo ignora.
    """
    try:
        # üîô Volver al inicio si estamos en pantalla de imputaci√≥n
        try:
            btn_volver = driver.find_element(By.CSS_SELECTOR, "#btVolver")
            if btn_volver.is_displayed():
                print("[DEBUG] üîô Volviendo al inicio antes de finalizar jornada...")
                btn_volver.click()
                time.sleep(2)
        except:
            pass  # Ya estamos en la pantalla correcta
        
        btn_fin = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, "#botonFinJornada")))

        if btn_fin.is_enabled():
            btn_fin.click()
            time.sleep(2)
            return "He finalizado tu jornada laboral"
        else:
            return "Tu jornada ya estaba finalizada"

    except Exception as e:
        return f"No he podido finalizar la jornada: {e}"



# ---------------------------------------------------------------------
# FUNCIONES DE CONSULTA
# ---------------------------------------------------------------------
def leer_tabla_imputacion(driver):
    """
    Lee toda la informaci√≥n de la tabla de imputaci√≥n actual.
    Devuelve un diccionario con los proyectos y sus horas.
    """
    try:
        # Buscar todas las filas con proyectos
        selects = driver.find_elements(By.CSS_SELECTOR, "select[name*='subproyecto']")
        
        if not selects:
            selects = driver.find_elements(By.CSS_SELECTOR, "select[id*='subproyecto']")
        
        proyectos_info = []
        
        for idx, sel in enumerate(selects):
            # Leer el proyecto seleccionado
            try:
                proyecto_nombre = driver.execute_script("""
                    var select = arguments[0];
                    var selectedOption = select.options[select.selectedIndex];
                    return selectedOption ? selectedOption.text : '';
                """, sel)
                
                if not proyecto_nombre or proyecto_nombre == "Seleccione opci√≥n":
                    continue
                
                # Buscar la fila correspondiente
                fila = sel.find_element(By.XPATH, "./ancestor::tr")
                
                # Leer las horas de cada d√≠a
                horas_dias = {}
                dias_map = {
                    "lunes": "h1",
                    "martes": "h2",
                    "mi√©rcoles": "h3",
                    "jueves": "h4",
                    "viernes": "h5"
                }
                
                for dia_nombre, dia_key in dias_map.items():
                    try:
                        campo = fila.find_element(By.CSS_SELECTOR, f"input[id$='.{dia_key}']")
                        valor = campo.get_attribute("value") or "0"
                        try:
                            valor_float = float(valor.replace(",", "."))
                        except ValueError:
                            valor_float = 0.0
                        horas_dias[dia_nombre] = valor_float
                    except:
                        horas_dias[dia_nombre] = 0.0
                
                # Calcular total
                total_horas = sum(horas_dias.values())
                
                if total_horas > 0:
                    proyectos_info.append({
                        "proyecto": proyecto_nombre,
                        "horas": horas_dias,
                        "total": total_horas
                    })
            
            except Exception as e:
                print(f"[DEBUG] Error leyendo proyecto {idx}: {e}")
                continue
        
        return proyectos_info
    
    except Exception as e:
        print(f"[DEBUG] Error leyendo tabla: {e}")
        return []


def consultar_dia(driver, wait, fecha_obj):
    """
    Consulta la informaci√≥n de un d√≠a espec√≠fico.
    Navega a la fecha, lee la tabla y devuelve un resumen del d√≠a.
    """
    try:
        # Calcular el lunes de esa semana para navegar
        lunes = lunes_de_semana(fecha_obj)
        seleccionar_fecha(driver, lunes)
        time.sleep(2)  # Esperar a que cargue la tabla
        
        # Leer la informaci√≥n de la tabla
        proyectos = leer_tabla_imputacion(driver)
        
        if not proyectos:
            fecha_str = fecha_obj.strftime('%d/%m/%Y')
            return f"No hay horas imputadas el {fecha_str}"
        
        # Determinar qu√© d√≠a de la semana es
        dia_semana_num = fecha_obj.weekday()  # 0=lunes, 4=viernes
        dias_nombres = ["lunes", "martes", "mi√©rcoles", "jueves", "viernes"]
        dia_nombre = dias_nombres[dia_semana_num] if dia_semana_num < 5 else None
        
        if not dia_nombre:
            return f"El d√≠a seleccionado es fin de semana"
        
        # Formatear la informaci√≥n
        fecha_str = fecha_obj.strftime('%d/%m/%Y')
        dia_nombre_capitalize = dia_nombre.capitalize()
        
        resumen = f"üìÖ {dia_nombre_capitalize} {fecha_str}\n\n"
        
        total_dia = 0
        proyectos_con_horas = []
        
        for proyecto in proyectos:
            nombre_corto = proyecto['proyecto'].split(' - ')[-1]  # Solo la √∫ltima parte
            horas_dia = proyecto['horas'][dia_nombre]
            
            if horas_dia > 0:
                proyectos_con_horas.append((nombre_corto, horas_dia))
                total_dia += horas_dia
        
        if not proyectos_con_horas:
            return f"üìÖ {dia_nombre_capitalize} {fecha_str}\n\n‚ö™ No hay horas imputadas este d√≠a"
        
        for nombre, horas in proyectos_con_horas:
            resumen += f"üîπ {nombre}: {horas}h\n"
        
        resumen += f"\nüìä Total: {total_dia} horas"
        
        return resumen
    
    except Exception as e:
        return f"No he podido consultar ese d√≠a: {e}"


def consultar_semana(driver, wait, fecha_obj):
    """
    Consulta la informaci√≥n de una semana espec√≠fica.
    Navega a la fecha, lee la tabla y devuelve un resumen.
    """
    try:
        # Seleccionar la fecha (lunes de la semana)
        # seleccionar_fecha() ya detectar√° si necesita volver
        lunes = lunes_de_semana(fecha_obj)
        seleccionar_fecha(driver, lunes)
        time.sleep(2)  # Esperar a que cargue la tabla
        
        # Leer la informaci√≥n de la tabla
        proyectos = leer_tabla_imputacion(driver)
        
        if not proyectos:
            return "No hay horas imputadas en esa semana"
        
        # Formatear la informaci√≥n
        fecha_inicio = lunes.strftime('%d/%m/%Y')
        fecha_fin = (lunes + timedelta(days=4)).strftime('%d/%m/%Y')
        
        resumen = f"üìÖ Semana del {fecha_inicio} al {fecha_fin}\n\n"
        
        total_semana = 0
        for proyecto in proyectos:
            nombre_corto = proyecto['proyecto'].split(' - ')[-1]  # Solo la √∫ltima parte
            horas = proyecto['horas']
            total = proyecto['total']
            total_semana += total
            
            # Formato de horas por d√≠a
            dias_str = f"L:{horas['lunes']}, M:{horas['martes']}, X:{horas['mi√©rcoles']}, J:{horas['jueves']}, V:{horas['viernes']}"
            resumen += f"üîπ {nombre_corto}: {total}h ({dias_str})\n"
        
        resumen += f"\nüìä Total: {total_semana} horas"
        
        return resumen
    
    except Exception as e:
        return f"No he podido consultar la semana: {e}"


def generar_resumen_natural(info_semana, consulta_usuario):
    """
    Usa GPT para generar un resumen natural de la informaci√≥n de la semana.
    """
    prompt = f"""Eres un asistente de imputaci√≥n de horas. El usuario pregunt√≥: "{consulta_usuario}"

Informaci√≥n de la semana:
{info_semana}

Genera una respuesta natural, amigable y bien formateada con emojis. 
Destaca lo m√°s importante y presenta la informaci√≥n de forma clara.

‚ö†Ô∏è IMPORTANTE: NO incluyas saludos ni presentaciones. Ve directo a la informaci√≥n solicitada.

Respuesta:"""
    
    try:
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": "Eres un asistente que resume informaci√≥n de horas laborales de forma amigable."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.7,
            max_tokens=300
        )
        
        return response.choices[0].message.content.strip()
    
    except Exception as e:
        # Si falla GPT, devolver el resumen tal cual
        return info_semana




# ---------------------------------------------------------------------
# INTERPRETACI√ìN REAL CON GPT
# ---------------------------------------------------------------------
def clasificar_mensaje(texto):
    """
    Clasifica si el mensaje del usuario es:
    - 'comando': requiere ejecutar acciones de imputaci√≥n
    - 'consulta': pide informaci√≥n sobre horas imputadas
    - 'conversacion': saludo, pregunta general o tema fuera del √°mbito laboral
    """
    print(f"[DEBUG] üîç Clasificando: '{texto}'")
    
    # Keywords para detectar comandos de jornada sin ambig√ºedad
    keywords_jornada = [
        "iniciar jornada", "empezar jornada", "comenzar jornada", "inicia jornada",
        "finalizar jornada", "terminar jornada", "acabar jornada", "finaliza jornada", 
        "termina jornada", "acaba jornada",
        "finaliza el dia", "termina el dia", "acaba el dia",
        "finalizar el dia", "terminar el dia", "acabar el dia",
        "fin de jornada", "cierra jornada"
    ]
    
    texto_lower = texto.lower()
    
    # Si contiene keywords de jornada, es comando directo
    if any(keyword in texto_lower for keyword in keywords_jornada):
        return "comando"
    
    # Keywords para imputaci√≥n
    keywords_imputacion = [
        "imput", "pon", "a√±ade", "agrega", "quita", "resta", "borra",
        "horas", "proyecto", "guardar", "emitir"
    ]
    
    if any(keyword in texto_lower for keyword in keywords_imputacion):
        return "comando"
    
    # Keywords para consultas - Detectar solicitudes de informaci√≥n
    keywords_consulta = [
        "qu√© tengo", "que tengo", "dime", "qu√© he imputado", "que he imputado",
        "cu√°ntas", "cuantas", "cu√°ntas horas", "cuantas horas",
        "ver", "mostrar", "dame", "info", "consulta", 
        "resumen", "resume", "resum√≠me", "qu√© hice", "que hice",
        "he hecho", "tengo hecho"
    ]
    
    # Detectar consultas por keywords
    if any(keyword in texto_lower for keyword in keywords_consulta):
        print(f"[DEBUG] üìä Detectada keyword de consulta")
        return "consulta"
    
    # üî¥ DETECCI√ìN ADICIONAL: Frases tipo "cu√°ntas horas..."
    if ("cuantas" in texto_lower or "cu√°ntas" in texto_lower) and "horas" in texto_lower:
        print(f"[DEBUG] üìä Detectada consulta de horas")
        return "consulta"
    
    # Si menciona "semana" + palabras de consulta = es una consulta
    if "semana" in texto_lower:
        print(f"[DEBUG] üìÖ Detectado 'semana' en el texto")
        keywords_consulta_semana = [
            "resumen", "resume", "resum√≠me", "qu√© tengo", "dime", "qu√© he imputado",
            "cu√°ntas", "ver", "mostrar", "dame", "info", "consulta", "cuenta"
        ]
        
        matches = [k for k in keywords_consulta_semana if k in texto_lower]
        print(f"[DEBUG] Keywords de consulta encontradas: {matches}")
        
        if matches:
            print(f"[DEBUG] ‚úÖ Clasificado como CONSULTA por keywords: semana + {matches}")
            return "consulta"
        else:
            print(f"[DEBUG] ‚ö†Ô∏è Tiene 'semana' pero no keywords espec√≠ficas, pasando a GPT...")
            # NO retornar nada, dejar que siga a GPT
    
    # Si no matchea keywords claras, usar GPT
    hoy = datetime.now().strftime("%Y-%m-%d")

    prompt = f"""
Clasifica el siguiente mensaje en UNA de estas tres categor√≠as:

1Ô∏è‚É£ "comando" ‚Üí El usuario quiere HACER algo:
   - Imputar horas, modificar datos, iniciar/finalizar jornada
   - Ejemplos: "pon 8 horas", "imputa en desarrollo", "finaliza jornada"

2Ô∏è‚É£ "consulta" ‚Üí El usuario quiere VER/SABER informaci√≥n:
   - Res√∫menes, qu√© tiene imputado, cu√°ntas horas, ver semanas/d√≠as
   - Ejemplos: "resumen de esta semana", "qu√© tengo imputado", "cu√°ntas horas", "cu√°ntas horas tengo hoy", "cu√°ntas horas he hecho"

3Ô∏è‚É£ "conversacion" ‚Üí Saludos o temas NO relacionados con trabajo:
   - Ejemplos: "hola", "qui√©n es Messi", "capital de Francia"

‚ö†Ô∏è IMPORTANTE: Si pregunta por informaci√≥n de horas/semanas/proyectos = "consulta"
Si quiere modificar/a√±adir/cambiar horas = "comando"

Responde SOLO una palabra: "comando", "consulta" o "conversacion".

Mensaje: "{texto}"
Respuesta:"""

    try:
        from openai import OpenAI
        client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": "Eres un clasificador inteligente de intenciones de usuario."},
                {"role": "user", "content": prompt}
            ],
            temperature=0,
            max_tokens=10
        )

        clasificacion = response.choices[0].message.content.strip().lower()
        print(f"[DEBUG] üß† GPT clasific√≥ '{texto[:50]}...' como: {clasificacion}")
        return clasificacion

    except Exception as e:
        print(f"[DEBUG] Error en clasificar_mensaje: {e}")
        return "conversacion"



def responder_conversacion(texto):
    """
    Usa GPT para responder a saludos, preguntas generales, etc.
    Mantiene contexto de la conversaci√≥n.
    """
    global historial_conversacion
    
    hoy = datetime.now().strftime("%Y-%m-%d")
    dia_semana = datetime.now().strftime("%A")
    
    # A√±adir mensaje del usuario al historial
    historial_conversacion.append({"role": "user", "content": texto})
    
    # Limitar historial a √∫ltimos 10 mensajes para no consumir muchos tokens
    if len(historial_conversacion) > 20:
        historial_conversacion = historial_conversacion[-20:]
    
    # System prompt solo la primera vez o si es un saludo expl√≠cito
    es_saludo_explicito = any(palabra in texto.lower() for palabra in ["hola", "buenos d√≠as", "buenas tardes", "buenas noches", "hey", "qu√© tal"])
    
    if len(historial_conversacion) <= 1 or es_saludo_explicito:
        system_content = f"""Eres un asistente virtual amigable especializado en gesti√≥n de imputaci√≥n de horas laborales.

Hoy es {hoy} ({dia_semana}).

Si el usuario te saluda por primera vez, pres√©ntate brevemente. 
Si ya has conversado con el usuario y te vuelve a saludar, responde de forma natural sin volver a presentarte.
Si el usuario NO te saluda, NO le saludes t√∫ tampoco. Ve directo al punto.
Responde de forma natural, amigable y concisa."""
    else:
        system_content = f"""Eres un asistente virtual amigable especializado en gesti√≥n de imputaci√≥n de horas laborales.

Hoy es {hoy} ({dia_semana}).

Est√°s en medio de una conversaci√≥n. NO te presentes de nuevo, NO saludes, solo responde a la pregunta de forma natural y directa.
Si te pregunta sobre algo externo (noticias, clima, informaci√≥n general), responde normalmente."""
    
    try:
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": system_content}
            ] + historial_conversacion,
            temperature=0.7,
            max_tokens=200
        )
        
        respuesta = response.choices[0].message.content.strip()
        
        # A√±adir respuesta al historial
        historial_conversacion.append({"role": "assistant", "content": respuesta})
        
        return respuesta
    
    except Exception as e:
        return "Disculpa, he tenido un problema al procesar tu mensaje. ¬øPodr√≠as intentarlo de nuevo?"


def interpretar_consulta(texto):
    """
    Interpreta consultas sobre horas imputadas y extrae la fecha solicitada.
    """
    hoy = datetime.now().strftime("%Y-%m-%d")
    dia_semana = datetime.now().strftime("%A")
    
    prompt = f"""Eres un asistente que interpreta consultas sobre horas laborales imputadas.

Hoy es {hoy} ({dia_semana}).

El usuario pregunta: "{texto}"

Extrae la fecha sobre la que pregunta y devuelve SOLO un JSON v√°lido con este formato:
{{
  "fecha": "YYYY-MM-DD",
  "tipo": "semana" | "dia"  
}}

Reglas CR√çTICAS:
- Siempre usa el a√±o 2025 (estamos en 2025)
- Si pregunta por "esta semana", "semana actual", "la semana" ‚Üí tipo: "semana", fecha: lunes de la semana
- Si pregunta por "HOY" ‚Üí tipo: "dia", fecha: {hoy}
- Si pregunta por "MA√ëANA" ‚Üí tipo: "dia", fecha: calcular d√≠a siguiente a {hoy}
- Si pregunta por "AYER" ‚Üí tipo: "dia", fecha: calcular d√≠a anterior a {hoy}
- Si pregunta por un D√çA ESPEC√çFICO ("el mi√©rcoles 15", "el 22 de septiembre", "el 15 de octubre") ‚Üí tipo: "dia", fecha: ese d√≠a exacto
- Si dice "semana pasada", calcula el lunes de la semana anterior a {hoy}
- Si dice "pr√≥xima semana", calcula el lunes de la siguiente semana

Ejemplos:
- "esta semana" ‚Üí {{"fecha": "(lunes de la semana actual)", "tipo": "semana"}}
- "semana pasada" ‚Üí {{"fecha": "(lunes de la semana anterior)", "tipo": "semana"}}
- "la semana del 26 de septiembre" ‚Üí {{"fecha": "2025-09-22", "tipo": "semana"}} (lunes de esa semana)
- "cu√°ntas horas tengo hoy" ‚Üí {{"fecha": "{hoy}", "tipo": "dia"}}
- "qu√© tengo imputado el mi√©rcoles 15" ‚Üí {{"fecha": "2025-10-15", "tipo": "dia"}} (ese d√≠a exacto)
- "qu√© tengo el 22 de septiembre" ‚Üí {{"fecha": "2025-09-22", "tipo": "dia"}} (ese d√≠a exacto)
- "dime qu√© tengo hoy" ‚Üí {{"fecha": "{hoy}", "tipo": "dia"}}
- "cu√°ntas horas he hecho hoy" ‚Üí {{"fecha": "{hoy}", "tipo": "dia"}}
- "cuantas horas tengo el 15 de octubre" ‚Üí {{"fecha": "2025-10-15", "tipo": "dia"}}
- "qu√© tengo el jueves" ‚Üí {{"fecha": "(calcular pr√≥ximo jueves)", "tipo": "dia"}}

MUY IMPORTANTE: 
- Devuelve SOLO el JSON, sin texto adicional, sin markdown, sin explicaciones
- Si pregunta por un d√≠a espec√≠fico ‚Üí tipo: "dia" y la fecha EXACTA de ese d√≠a
- Si pregunta por una semana ‚Üí tipo: "semana" y el LUNES de esa semana

Respuesta:"""
    
    try:
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": "Eres un int√©rprete de fechas. Devuelves solo JSON v√°lido, sin markdown ni texto adicional."},
                {"role": "user", "content": prompt}
            ],
            temperature=0
        )
        
        raw = response.choices[0].message.content.strip()
        
        # Limpiar posible markdown
        if raw.startswith("```"):
            raw = raw.split("\n", 1)[1]  # Quitar primera l√≠nea
            raw = raw.rsplit("\n", 1)[0]  # Quitar √∫ltima l√≠nea
            raw = raw.replace("```", "").strip()
        
        data = json.loads(raw)
        
        # ‚úÖ VALIDACI√ìN ADICIONAL: Asegurar que la fecha sea un lunes SOLO si tipo="semana"
        try:
            if data.get("tipo") == "semana":
                fecha_obj = datetime.fromisoformat(data["fecha"])
                # Si no es lunes (weekday != 0), calcular el lunes de esa semana
                if fecha_obj.weekday() != 0:
                    dias_hasta_lunes = fecha_obj.weekday()
                    lunes = fecha_obj - timedelta(days=dias_hasta_lunes)
                    data["fecha"] = lunes.strftime("%Y-%m-%d")
                    print(f"[DEBUG] üîß Ajustado a lunes: {data['fecha']}")
        except:
            pass
        
        return data
    
    except json.JSONDecodeError as e:
        print(f"[DEBUG] Error parseando JSON de GPT. Raw: {raw}")
        print(f"[DEBUG] Error: {e}")
        return None
    except Exception as e:
        print(f"[DEBUG] Error interpretando consulta: {e}")
        return None


def interpretar_con_gpt(texto):

    hoy = datetime.now().strftime("%Y-%m-%d")
    dia_semana = datetime.now().strftime("%A")

    # Usar f-string pero con llaves cu√°druples {{{{ para que se escapen correctamente
    prompt = f"""
Eres un asistente avanzado que traduce frases en lenguaje natural a una lista de comandos JSON 
para automatizar una web de imputaci√≥n de horas laborales. 

üìÖ CONTEXTO TEMPORAL:
Hoy es {hoy} ({dia_semana}).

üéØ ACCIONES V√ÅLIDAS:
- seleccionar_fecha (requiere "fecha" en formato YYYY-MM-DD)
- volver
- seleccionar_proyecto (requiere "nombre")
- imputar_horas_dia (requiere "dia" y "horas", acepta "modo": "sumar" o "establecer")
- imputar_horas_semana
- borrar_todas_horas_dia (requiere "dia") - Pone a 0 TODOS los proyectos en ese d√≠a
- iniciar_jornada
- finalizar_jornada
- guardar_linea
- emitir_linea
- eliminar_linea (requiere "nombre" del proyecto)

üìã REGLAS CR√çTICAS:

1Ô∏è‚É£ FECHAS Y TIEMPO:
   - Siempre usa el a√±o 2025 aunque el usuario no lo diga
   - "hoy" = {hoy}
   - "ayer" = calcula d√≠a anterior a {hoy}
   - "ma√±ana" = calcula d√≠a siguiente a {hoy}
   - Si menciona un D√çA DE LA SEMANA (lunes, martes, etc.), calcula su fecha exacta en formato YYYY-MM-DD
   - ‚ö†Ô∏è CR√çTICO: Si el usuario NO especifica fecha expl√≠citamente, asume que es "HOY" ({hoy})
   - ‚ö†Ô∏è MUY IMPORTANTE: Si menciona "pr√≥xima semana", "semana que viene", "la semana del [fecha]", o CUALQUIER referencia temporal diferente de HOY, SIEMPRE debes generar {{"accion": "seleccionar_fecha", "parametros": {{"fecha": "YYYY-MM-DD"}}}} con el LUNES de esa semana como PRIMERA acci√≥n, antes de cualquier otra cosa
   - Ejemplo CR√çTICO: "borra la l√≠nea de Formaci√≥n de la pr√≥xima semana" ‚Üí PRIMERO seleccionar_fecha(lunes pr√≥xima semana), LUEGO eliminar_linea(Formaci√≥n)
   - CR√çTICO: SIEMPRE genera {{"accion": "seleccionar_fecha", "parametros": {{"fecha": "YYYY-MM-DD"}}}} con el LUNES de la semana correspondiente cuando hay referencias temporales

2Ô∏è‚É£ PROYECTOS M√öLTIPLES:
   Si el usuario menciona varios proyectos en una frase:
   "3.5 en Desarrollo y 2 en Direcci√≥n el lunes"
   
   Genera acciones INTERCALADAS:
   seleccionar_proyecto(Desarrollo) ‚Üí imputar_horas_dia(lunes, 3.5) ‚Üí 
   seleccionar_proyecto(Direcci√≥n) ‚Üí imputar_horas_dia(lunes, 2)
   
   ‚ö†Ô∏è CR√çTICO: SIEMPRE incluye seleccionar_proyecto antes de cada imputaci√≥n,
   incluso si parece que ya estaba seleccionado.

3Ô∏è‚É£ MODOS DE IMPUTACI√ìN:
   - "sumar", "a√±adir", "agregar", "pon" ‚Üí modo: "sumar" (default)
   - "totales", "establece", "cambia a", "pon exactamente" ‚Üí modo: "establecer"
   - "quita", "resta", "borra", "elimina" horas ‚Üí horas NEGATIVAS + modo "sumar"

4Ô∏è‚É£ ELIMINACI√ìN DE L√çNEAS Y HORAS - ‚ö†Ô∏è MUY IMPORTANTE:
   
   HAY 3 TIPOS DE ELIMINACI√ìN:
   
   A) "Borra/elimina/quita las horas del [D√çA]" SIN mencionar proyecto espec√≠fico:
      ‚Üí usar "borrar_todas_horas_dia" con el d√≠a
      ‚Üí Esto pone a 0 TODOS los proyectos en ese d√≠a
      ‚Üí Ejemplos: "borra las horas del martes", "elimina las horas del mi√©rcoles"
   
   B) "Borra/elimina las horas del [D√çA] en [PROYECTO]" (menciona proyecto espec√≠fico):
      ‚Üí usar "seleccionar_proyecto" + "imputar_horas_dia" con modo "establecer" y horas: 0
      ‚Üí Esto pone a 0 SOLO ese proyecto en ese d√≠a
      ‚Üí Ejemplos: "borra las horas del mi√©rcoles en Desarrollo", "quita las del lunes de Estudio"
   
   C) "Borra la l√≠nea" o "elimina el proyecto [NOMBRE]":
      ‚Üí usar "eliminar_linea" con el nombre del proyecto
      ‚Üí Esto elimina TODA la l√≠nea del proyecto (todos los d√≠as)
      ‚Üí Ejemplos: "borra la l√≠nea de Desarrollo", "elimina el proyecto Estudio"
   
   ‚ö†Ô∏è REGLA DECISIVA:
   - Si NO menciona proyecto ‚Üí borrar_todas_horas_dia (afecta TODOS los proyectos en ese d√≠a)
   - Si menciona proyecto ‚Üí seleccionar_proyecto + imputar_horas_dia con 0 (afecta SOLO ese proyecto)
   - Si dice "l√≠nea" o "proyecto completo" ‚Üí eliminar_linea
   
   - SIEMPRE a√±adir {{"accion": "guardar_linea"}} despu√©s de cualquier eliminaci√≥n

5Ô∏è‚É£ GUARDAR VS EMITIR:
   - Si menciona "expide", "emite", "env√≠a", "env√≠alo" ‚Üí usar "emitir_linea" al final
   - En cualquier otro caso ‚Üí usar "guardar_linea" al final

6Ô∏è‚É£ JORNADA LABORAL:
   - Usa "iniciar_jornada" cuando el usuario diga: "inicia jornada", "empieza jornada", "iniciar jornada", "comenzar jornada"
   - Usa "finalizar_jornada" cuando el usuario diga: "finaliza jornada", "termina jornada", "finalizar jornada", "terminar jornada", "acabar jornada", "cierra jornada"
   - NO generes estas acciones si el usuario solo menciona "trabajo" o "d√≠a" sin referirse espec√≠ficamente a la jornada laboral

7Ô∏è‚É£ ORDEN DE EJECUCI√ìN:
   Ordena las acciones SIEMPRE as√≠:
   a) seleccionar_fecha (si aplica - SIEMPRE si menciona una semana/d√≠a espec√≠fico diferente de HOY)
   b) iniciar_jornada (si se mencion√≥)
   c) seleccionar_proyecto (si aplica)
   d) imputar_horas_dia, imputar_horas_semana, eliminar_linea, borrar_todas_horas_dia, etc.
   e) finalizar_jornada (si se mencion√≥)
   f) guardar_linea o emitir_linea (SIEMPRE al final, OBLIGATORIO)
   
   ‚ö†Ô∏è CR√çTICO: NUNCA omitas guardar_linea/emitir_linea. Es OBLIGATORIO al final de cualquier imputaci√≥n/modificaci√≥n.
   ‚ö†Ô∏è IMPORTANTE: Si el usuario menciona "pr√≥xima semana", "esa semana", "el martes", etc., seleccionar_fecha es el PRIMER paso obligatorio.

8Ô∏è‚É£ FORMATO DE SALIDA:
   - Devuelve SOLO un array JSON v√°lido
   - SIN markdown (nada de ```json```), SIN texto explicativo, SIN comentarios
   - El JSON debe empezar directamente con [ y terminar con ]
   - Si algo no se entiende, om√≠telo (pero intenta interpretarlo inteligentemente primero)

üí° EJEMPLOS:

Ejemplo 1 - Simple (con fecha impl√≠cita "hoy"):
Entrada: "Pon 8 horas en Desarrollo hoy"
Salida:
[
  {{"accion": "seleccionar_fecha", "parametros": {{"fecha": "(lunes de la semana de hoy)"}}}},
  {{"accion": "seleccionar_proyecto", "parametros": {{"nombre": "Desarrollo"}}}},
  {{"accion": "imputar_horas_dia", "parametros": {{"dia": "{hoy}", "horas": 8}}}},
  {{"accion": "guardar_linea"}}
]

Ejemplo 1b - Sin especificar fecha (asumir HOY):
Entrada: "Pon 3 horas en Estudio"
Salida:
[
  {{"accion": "seleccionar_fecha", "parametros": {{"fecha": "(lunes de la semana de hoy)"}}}},
  {{"accion": "seleccionar_proyecto", "parametros": {{"nombre": "Estudio"}}}},
  {{"accion": "imputar_horas_dia", "parametros": {{"dia": "{hoy}", "horas": 3}}}},
  {{"accion": "guardar_linea"}}
]

Ejemplo 2 - M√∫ltiples proyectos:
Entrada: "3.5 en Desarrollo y 2 en Direcci√≥n el lunes"
Salida:
[
  {{"accion": "seleccionar_fecha", "parametros": {{"fecha": "2025-10-20"}}}},
  {{"accion": "seleccionar_proyecto", "parametros": {{"nombre": "Desarrollo"}}}},
  {{"accion": "imputar_horas_dia", "parametros": {{"dia": "lunes", "horas": 3.5}}}},
  {{"accion": "seleccionar_proyecto", "parametros": {{"nombre": "Direcci√≥n"}}}},
  {{"accion": "imputar_horas_dia", "parametros": {{"dia": "lunes", "horas": 2}}}},
  {{"accion": "guardar_linea"}}
]

Ejemplo 3 - Modo establecer:
Entrada: "Cambia Desarrollo a 4 horas totales el martes"
Salida:
[
  {{"accion": "seleccionar_proyecto", "parametros": {{"nombre": "Desarrollo"}}}},
  {{"accion": "imputar_horas_dia", "parametros": {{"dia": "martes", "horas": 4, "modo": "establecer"}}}},
  {{"accion": "guardar_linea"}}
]

Ejemplo 4 - Eliminar l√≠nea:
Entrada: "Borra la l√≠nea de Direcci√≥n"
Salida:
[
  {{"accion": "eliminar_linea", "parametros": {{"nombre": "Direcci√≥n"}}}},
  {{"accion": "guardar_linea"}}
]

Ejemplo 5 - Jornada laboral:
Entrada: "Finaliza la jornada"
Salida:
[
  {{"accion": "finalizar_jornada"}}
]

Ejemplo 6 - Toda la semana:
Entrada: "Imputa toda la semana en Estudio"
Salida:
[
  {{"accion": "seleccionar_fecha", "parametros": {{"fecha": "(lunes de la semana actual)"}}}},
  {{"accion": "seleccionar_proyecto", "parametros": {{"nombre": "Estudio"}}}},
  {{"accion": "imputar_horas_semana"}},
  {{"accion": "guardar_linea"}}
]

‚ö†Ô∏è MUY IMPORTANTE: SIEMPRE, SIEMPRE incluye "guardar_linea" o "emitir_linea" al final de CUALQUIER imputaci√≥n, incluyendo "imputar_horas_semana". NO OMITIR NUNCA.

Ejemplo 7 - Borrar horas de un d√≠a espec√≠fico:
Entrada: "Borra las horas del mi√©rcoles en Desarrollo"
Salida:
[
  {{"accion": "seleccionar_fecha", "parametros": {{"fecha": "(lunes de la semana actual)"}}}},
  {{"accion": "seleccionar_proyecto", "parametros": {{"nombre": "Desarrollo"}}}},
  {{"accion": "imputar_horas_dia", "parametros": {{"dia": "mi√©rcoles", "horas": 0, "modo": "establecer"}}}},
  {{"accion": "guardar_linea"}}
]

Ejemplo 7b - Borrar horas de TODOS los proyectos en un d√≠a:
Entrada: "B√≥rramen las horas del martes"
Salida:
[
  {{"accion": "seleccionar_fecha", "parametros": {{"fecha": "(lunes de la semana actual)"}}}},
  {{"accion": "borrar_todas_horas_dia", "parametros": {{"dia": "martes"}}}},
  {{"accion": "guardar_linea"}}
]

Ejemplo 7c - Borrar horas de UN proyecto espec√≠fico en un d√≠a:
Entrada: "Quita las horas del viernes en Desarrollo"
Salida:
[
  {{"accion": "seleccionar_fecha", "parametros": {{"fecha": "(lunes de la semana actual)"}}}},
  {{"accion": "seleccionar_proyecto", "parametros": {{"nombre": "Desarrollo"}}}},
  {{"accion": "imputar_horas_dia", "parametros": {{"dia": "viernes", "horas": 0, "modo": "establecer"}}}},
  {{"accion": "guardar_linea"}}
]

Ejemplo 7d - Eliminar l√≠nea completa (semana actual):
Entrada: "Borra la l√≠nea de Desarrollo"
Salida:
[
  {{"accion": "eliminar_linea", "parametros": {{"nombre": "Desarrollo"}}}},
  {{"accion": "guardar_linea"}}
]

Ejemplo 7e - Eliminar l√≠nea de una semana espec√≠fica:
Entrada: "Borra la l√≠nea de Formaci√≥n de la pr√≥xima semana"
Salida:
[
  {{"accion": "seleccionar_fecha", "parametros": {{"fecha": "(calcular lunes de la pr√≥xima semana)"}}}},
  {{"accion": "eliminar_linea", "parametros": {{"nombre": "Formaci√≥n"}}}},
  {{"accion": "guardar_linea"}}
]

‚ö†Ô∏è CR√çTICO PARA BORRAR HORAS:
1. "Borra las horas del [D√çA]" (SIN proyecto) ‚Üí borrar_todas_horas_dia [TODOS los proyectos en ese d√≠a a 0]
2. "Borra las horas del [D√çA] en [PROYECTO]" ‚Üí seleccionar_proyecto + imputar_horas_dia con 0 [SOLO ese proyecto en ese d√≠a]
3. "Borra la l√≠nea" o "elimina el proyecto" ‚Üí eliminar_linea [elimina TODO el proyecto]

REGLA DE ORO: Si NO menciona proyecto espec√≠fico ‚Üí usar borrar_todas_horas_dia (afecta a TODOS)

üö® RECORDATORIO FINAL ANTES DE GENERAR JSON:
- Si menciona "pr√≥xima semana", "esa semana", "el [d√≠a de la semana]", o cualquier referencia temporal diferente de HOY ‚Üí SIEMPRE empieza con {{"accion": "seleccionar_fecha", "parametros": {{"fecha": "YYYY-MM-DD"}}}}
- Ejemplo: "borra la l√≠nea de Formaci√≥n de la pr√≥xima semana" debe generar: [seleccionar_fecha, eliminar_linea, guardar_linea]
- NO omitas seleccionar_fecha aunque la acci√≥n principal sea eliminar_linea, borrar_todas_horas_dia, etc.

üéØ AHORA PROCESA:
Frase del usuario: "{texto}"
"""

    try:
        response = client.chat.completions.create(
            model="gpt-4o",  # üöÄ ACTUALIZADO: Modelo m√°s potente para interpretaci√≥n compleja
            messages=[
                {"role": "system", "content": "Eres un int√©rprete experto de lenguaje natural a comandos JSON estructurados. Procesas instrucciones complejas con alta precisi√≥n, manejando m√∫ltiples proyectos, fechas relativas y contextos ambiguos."},
                {"role": "user", "content": prompt}
            ],
            temperature=0  # Mantener en 0 para m√°xima precisi√≥n y consistencia
        )

        raw = response.choices[0].message.content.strip()
        print(f"[DEBUG] üß† GPT gener√≥: {raw}")
        
        # üßπ Limpiar markdown si GPT-4o lo a√±ade (```json ... ```)
        if raw.startswith("```"):
            # Quitar la primera l√≠nea (```json o ```)
            lines = raw.split("\n")
            raw = "\n".join(lines[1:-1])  # Quitar primera y √∫ltima l√≠nea
            raw = raw.strip()
            print(f"[DEBUG] üßπ JSON limpio: {raw}")
        
        data = json.loads(raw)

        # Si devuelve un solo objeto, lo convertimos a lista
        if isinstance(data, dict):
            data = [data]

        # NO reordenar si hay m√∫ltiples proyectos intercalados
        # El prompt de GPT ya genera el orden correcto
        # data = sorted(data, key=lambda x: orden_correcto.index(
        #     x["accion"]) if x["accion"] in orden_correcto else 99)

        return data

    except Exception as e:
        return []



# ---------------------------------------------------------------------
# EJECUTAR ACCI√ìN
# ---------------------------------------------------------------------
def ejecutar_accion(driver, wait, orden, contexto):
    """
    Ejecuta la acci√≥n recibida desde el modelo de IA.
    El par√°metro `contexto` mantiene informaci√≥n temporal,
    como la fila del proyecto actualmente seleccionado.
    Devuelve el mensaje de respuesta natural.
    """
    accion = orden.get("accion")

    # üïí Iniciar jornada
    if accion == "iniciar_jornada":
        return iniciar_jornada(driver, wait)

    # üïì Finalizar jornada
    elif accion == "finalizar_jornada":
        return finalizar_jornada(driver, wait)

    # üìÖ Seleccionar fecha
    elif accion == "seleccionar_fecha":
        try:
            fecha = datetime.fromisoformat(orden["parametros"]["fecha"])
            return seleccionar_fecha(driver, fecha)
        except Exception as e:
            return f"No he podido procesar la fecha: {e}"

    # üìÇ Seleccionar proyecto
    elif accion == "seleccionar_proyecto":
        try:
            nombre = orden["parametros"].get("nombre")
            fila, mensaje = seleccionar_proyecto(driver, wait, nombre)
            
            if fila:
                # ‚úÖ Proyecto encontrado o creado correctamente
                contexto["fila_actual"] = fila
                contexto["proyecto_actual"] = nombre
                return mensaje
            else:
                # ‚ùå Proyecto NO encontrado - DETENER ejecuci√≥n
                contexto["fila_actual"] = None
                contexto["proyecto_actual"] = None
                contexto["error_critico"] = True  # Marcar error cr√≠tico
                return mensaje  # El mensaje ya viene con el error
                
        except Exception as e:
            return f"Error seleccionando proyecto: {e}"
        # üóëÔ∏è Eliminar l√≠nea
# üóëÔ∏è Eliminar l√≠nea
    elif accion == "eliminar_linea":
        try:
            nombre = orden["parametros"].get("nombre")
            resultado = eliminar_linea_proyecto(driver, wait, nombre)
            
            # Auto-guardar despu√©s de eliminar
            time.sleep(0.5)
            try:
                btn_guardar = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, "#btGuardarLinea")))
                btn_guardar.click()
                time.sleep(1.5)
                return resultado + " y he guardado los cambios"
            except:
                return resultado + " (recuerda guardar los cambios)"
                
        except Exception as e:
            return f"Error eliminando l√≠nea: {e}"

    # üóëÔ∏è Borrar todas las horas de un d√≠a
    elif accion == "borrar_todas_horas_dia":
        try:
            dia_param = orden["parametros"].get("dia")
            
            # Si GPT devuelve una fecha ISO ‚Üí convertir a nombre de d√≠a
            try:
                fecha_obj = datetime.fromisoformat(dia_param)
                dia = fecha_obj.strftime("%A").lower()
                dias_map = {
                    "monday": "lunes",
                    "tuesday": "martes",
                    "wednesday": "mi√©rcoles",
                    "thursday": "jueves",
                    "friday": "viernes"
                }
                dia = dias_map.get(dia, dia)
            except Exception:
                dia = dia_param.lower()
            
            return borrar_todas_horas_dia(driver, wait, dia)
        
        except Exception as e:
            return f"Error al borrar horas: {e}"

    # ‚è±Ô∏è Imputar horas del d√≠a
    elif accion == "imputar_horas_dia":
        try:
            dia_param = orden["parametros"].get("dia")
            horas = float(orden["parametros"].get("horas", 0))
            modo = orden["parametros"].get("modo", "sumar")  # ‚Üê NUEVO
            fila = contexto.get("fila_actual")
            proyecto = contexto.get("proyecto_actual", "Desconocido")

            if not fila:
                return "Necesito que primero selecciones un proyecto antes de imputar horas"

            # Si GPT devuelve una fecha ISO ‚Üí convertir a nombre de d√≠a
            try:
                fecha_obj = datetime.fromisoformat(dia_param)
                dia = fecha_obj.strftime("%A").lower()
                dias_map = {
                    "monday": "lunes",
                    "tuesday": "martes",
                    "wednesday": "mi√©rcoles",
                    "thursday": "jueves",
                    "friday": "viernes"
                }
                dia = dias_map.get(dia, dia)
            except Exception:
                dia = dia_param.lower()

            return imputar_horas_dia(driver, wait, dia, horas, fila, proyecto, modo)  # ‚Üê ACTUALIZADO

        except Exception as e:
            return f"Error al imputar horas: {e}"

    # ‚è±Ô∏è Imputar horas semanales
    elif accion == "imputar_horas_semana":
       
        proyecto = contexto.get("proyecto_actual")
        if not proyecto:
            return "‚ùå No s√© en qu√© proyecto quieres imputar. D√≠melo, por favor."

        fila = contexto.get("fila_actual")
        if not fila:
            return f"‚ùå No he podido seleccionar el proyecto '{proyecto}'. ¬øEst√°s en la pantalla de imputaci√≥n?"

        return imputar_horas_semana(driver, wait, fila, nombre_proyecto=proyecto)

    # üíæ Guardar l√≠nea
    elif accion == "guardar_linea":
        return guardar_linea(driver, wait)

    # üì§ Emitir l√≠nea
    elif accion == "emitir_linea":
        return emitir_linea(driver, wait)

    # ‚Ü©Ô∏è Volver a inicio
    elif accion == "volver":
        return volver_inicio(driver)

    # ‚ùì Desconocido
    else:
        return "No he entendido esa instrucci√≥n"



# ---------------------------------------------------------------------
# MAIN LOOP
# ---------------------------------------------------------------------
def main():
    service = ChromeService(ChromeDriverManager().install())
    options = webdriver.ChromeOptions()
    driver = webdriver.Chrome(service=service, options=options)
    wait = WebDriverWait(driver, 15)

    # üöÄ Login autom√°tico al inicio
    hacer_login(driver, wait)

    print("\n" + "="*60)
    print("üëã ¬°Hola! Soy tu asistente de imputaci√≥n de horas")
    print("="*60)
    print("\nYa he iniciado sesi√≥n en el sistema por ti.")
    print("\nPuedes pedirme cosas como:")
    print("  ‚Ä¢ 'Imputa 8 horas en Desarrollo hoy'")
    print("  ‚Ä¢ 'Abre el proyecto Estudio y pon toda la semana'")
    print("  ‚Ä¢ 'A√±ade 2.5 horas en Direcci√≥n el lunes y em√≠telo'")
    print("  ‚Ä¢ 'Inicia la jornada'")
    print("\nEscribe 'salir' cuando quieras terminar.\n")
    print("="*60 + "\n")

    try:
        contexto = {"fila_actual": None, "proyecto_actual": None}

        while True:
            texto = input("üí¨ T√∫: ")
            if texto.lower() in ["salir", "exit", "quit"]:
                print("\nüëã ¬°Hasta pronto! Cerrando el navegador...")
                break

            # Clasificar el tipo de mensaje
            tipo_mensaje = clasificar_mensaje(texto)
            
            if tipo_mensaje == "conversacion":
                # Responder con conversaci√≥n natural
                respuesta = responder_conversacion(texto)
                print(f"\nü§ñ Asistente: {respuesta}\n")
                continue
            
            # Si es una consulta, procesar la informaci√≥n
            if tipo_mensaje == "consulta":
                consulta_info = interpretar_consulta(texto)
                
                if consulta_info:
                    try:
                        fecha = datetime.fromisoformat(consulta_info["fecha"])
                        
                        if consulta_info.get("tipo") == "dia":
                            # Consulta de un d√≠a espec√≠fico
                            info_bruta = consultar_dia(driver, wait, fecha)
                            resumen_natural = generar_resumen_natural(info_bruta, texto)
                            print(f"\nü§ñ Asistente:\n{resumen_natural}\n")
                        elif consulta_info.get("tipo") == "semana":
                            # Consulta de una semana completa
                            info_bruta = consultar_semana(driver, wait, fecha)
                            resumen_natural = generar_resumen_natural(info_bruta, texto)
                            print(f"\nü§ñ Asistente:\n{resumen_natural}\n")
                        else:
                            print("\nü§î No he entendido si preguntas por un d√≠a o una semana.\n")
                    except Exception as e:
                        print(f"\n‚ö†Ô∏è No he podido consultar: {e}\n")
                else:
                    print("\nü§î No he entendido qu√© quieres consultar. ¬øPodr√≠as ser m√°s espec√≠fico?\n")
                continue
            
            # Si es un comando, interpretarlo y ejecutarlo
            ordenes = interpretar_con_gpt(texto)
            
            if not ordenes:
                print("ü§î No he entendido qu√© quieres que haga. ¬øPodr√≠as reformularlo?\n")
                continue

            # üîÑ Reordenar: siempre primero la fecha, luego el resto
            ordenes = sorted(ordenes, key=lambda o: 0 if o["accion"] == "seleccionar_fecha" else 1)

            # Ejecutar acciones y acumular respuestas
            respuestas = []
            i = 0
            while i < len(ordenes):
                orden = ordenes[i]
                mensaje = ejecutar_accion(driver, wait, orden, contexto)
                if mensaje:
                    respuestas.append(mensaje)
                i += 1

            # Generar respuesta natural con GPT
            if respuestas:
                respuesta_natural = generar_respuesta_natural(respuestas, texto)
                print(f"\nü§ñ Asistente: {respuesta_natural}\n")

    finally:
        driver.quit()
        print("\nüîö Navegador cerrado. ¬°Que tengas un buen d√≠a!\n")


# ---------------------------------------------------------------------
if __name__ == "__main__":
    main()
